{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_class_private_field_get.js","node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js","node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js","node_modules/@swc/helpers/esm/_class_private_field_init.js","node_modules/@swc/helpers/esm/_check_private_redeclaration.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $ac3905202f0710b7$export$71511d61b312f219(receiver, descriptor) {\n    if (descriptor.get) return descriptor.get.call(receiver);\n    return descriptor.value;\n}\n\n\nfunction $753de3cb5925592a$export$71511d61b312f219(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n    return privateMap.get(receiver);\n}\n\n\nfunction $2f97c2a4ea6269f4$export$71511d61b312f219(receiver, privateMap) {\n    var descriptor = (0, $753de3cb5925592a$export$71511d61b312f219)(receiver, privateMap, \"get\");\n    return (0, $ac3905202f0710b7$export$71511d61b312f219)(receiver, descriptor);\n}\n\n\nfunction $f86983e96b0c893e$export$71511d61b312f219(obj, privateCollection) {\n    if (privateCollection.has(obj)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\n\n\nfunction $5d6c3530fa14a187$export$71511d61b312f219(obj, privateMap, value) {\n    (0, $f86983e96b0c893e$export$71511d61b312f219)(obj, privateMap);\n    privateMap.set(obj, value);\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\n\"use strict\";\nvar // How many cells created in the beginning of the game\n$3d28d7f1aac198f5$var$_numOfInitialCells = /*#__PURE__*/ new WeakMap(), $3d28d7f1aac198f5$var$_defaultState = /*#__PURE__*/ new WeakMap();\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $2f97c2a4ea6269f4$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_defaultState);\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $5d6c3530fa14a187$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_numOfInitialCells, {\n            writable: true,\n            value: 2\n        });\n        (0, $5d6c3530fa14a187$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_defaultState, {\n            writable: true,\n            value: [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ]\n        });\n        this.initialState = initialState;\n        this.state = [];\n        this.score = 0;\n        this.prevState = [];\n        this.isChanged = false;\n        this.status = \"idle\";\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = initialState[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var rowArr = _step.value;\n                this.state.push((0, $227c6742e0ff6f82$export$71511d61b312f219)(rowArr));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"setStatus\",\n            value: function setStatus(stat) {\n                this.status = stat;\n            }\n        },\n        {\n            // checks if there are any duplicate values next to each other\n            key: \"gameEnd\",\n            value: function gameEnd() {\n                for(var row = 0; row < this.state.length; row++)for(var col = 1; col < this.state[0].length; col++){\n                    if (this.state[row][col - 1] === this.state[row][col] || this.state[col - 1][row] === this.state[col][row] || this.state[row][col - 1] === 0 || this.state[row][col] === 0) return false;\n                }\n                this.setStatus(\"lose\");\n                return true;\n            }\n        },\n        {\n            // tracks if there are any changes in any direction\n            // (if not then no need to add new value)\n            // but maybe it is a loss, so check for it as well\n            key: \"changes\",\n            value: function changes(state) {\n                this.isChanged = false;\n                for(var row = 0; row < state.length; row++){\n                    for(var col = 0; col < state[0].length; col++)if (this.state[row][col] !== state[row][col]) {\n                        this.isChanged = true;\n                        this.addValue();\n                        return this.isChanged;\n                    }\n                }\n                return this.isChanged;\n            }\n        },\n        {\n            key: \"freeSpaceToLeft\",\n            value: function freeSpaceToLeft(state) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        for(var i = 0; i < row.length; i++){\n                            var indexOfVal = row.findIndex(function(el, index, array) {\n                                if (array[index - 1] === 0 && el !== 0) return true;\n                            });\n                            var rowUpToValue = row.slice(0, indexOfVal);\n                            var firstEmpty = rowUpToValue.indexOf(0);\n                            if (firstEmpty !== -1 && indexOfVal !== -1) {\n                                row[firstEmpty] = row[indexOfVal];\n                                row[indexOfVal] = 0;\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return state;\n            }\n        },\n        {\n            key: \"updateState\",\n            value: function updateState() {\n                var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.state;\n                var state = this.copyState(arr);\n                // clears free space up to the left\n                state = this.freeSpaceToLeft(state);\n                // adds same values that are close neighbours in a row\n                state = this.addUp(state);\n                // clears free space up to the left after adding and updates the state\n                state = this.freeSpaceToLeft(state);\n                return state;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.getStatus() !== \"playing\") return;\n                this.prevState = this.copyState(this.state);\n                // this.addValue();\n                this.state = this.updateState();\n                this.changes(this.prevState);\n                this.gameEnd();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.state;\n                if (this.getStatus() !== \"playing\") return;\n                // check if moveRight was called by moveDown\n                var isCb = true;\n                if (arr === this.state) {\n                    isCb = false;\n                    this.prevState = this.copyState(this.state);\n                }\n                var state = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        state.push((0, $227c6742e0ff6f82$export$71511d61b312f219)(row).toReversed());\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                state = this.updateState(state);\n                this.state = [];\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    for(var _iterator1 = state[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                        var row1 = _step1.value;\n                        this.state.push((0, $227c6742e0ff6f82$export$71511d61b312f219)(row1).toReversed());\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                            _iterator1.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                if (!isCb) {\n                    this.changes(this.prevState);\n                    this.gameEnd();\n                }\n                return this.state;\n            }\n        },\n        {\n            // creates a state where columns become rows and vice versa\n            key: \"transposeMatrix\",\n            value: function transposeMatrix() {\n                var initial = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.state;\n                var transposed = this.copyState(initial);\n                for(var row = 0; row < initial.length; row++)for(var col = 0; col < initial[0].length; col++)transposed[col][row] = initial[row][col];\n                return transposed;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.upOrDown(this.updateState);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.upOrDown(this.moveRight);\n            }\n        },\n        {\n            // helper function to avoid duplication\n            key: \"upOrDown\",\n            value: function upOrDown(callback) {\n                if (this.getStatus() !== \"playing\") return;\n                this.prevState = this.copyState(this.state);\n                var state = this.transposeMatrix();\n                // Call the callback function with the `state`\n                state = callback.call(this, state);\n                this.state = this.transposeMatrix(state);\n                this.changes(this.prevState);\n                this.gameEnd();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                // change status of the game to playing;\n                this.setStatus(\"playing\");\n                // no need to add values at the start if the values are correct\n                // (add 'return' if this.validateInitialState() is true)\n                this.validateInitialState();\n                // Choose randomly what two columns and rows get initial values of 2/4;\n                for(var j = 0; j < (0, $2f97c2a4ea6269f4$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_numOfInitialCells); j++)this.addValue();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = this.copyState();\n                this.setStatus(\"idle\");\n                this.score = 0;\n            // this.start();\n            }\n        },\n        {\n            // Creates 2-level deep copy for an array\n            key: \"copyState\",\n            value: function copyState() {\n                var initState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.initialState;\n                var resetArr = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = initState[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var rowArr = _step.value;\n                        resetArr.push((0, $227c6742e0ff6f82$export$71511d61b312f219)(rowArr));\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return resetArr;\n            }\n        },\n        {\n            // add new value to the game randomly\n            key: \"addValue\",\n            value: function addValue() {\n                // in case of an infinite loop\n                var attempt = 0;\n                for(var i = 0; i < 1; i++){\n                    var col = Math.floor(Math.random() * this.state.length);\n                    var row = Math.floor(Math.random() * this.state[0].length);\n                    var value = Math.random() < 0.9 ? 2 : 4;\n                    // in case of an infinite loop\n                    if (attempt++ > 1000) break;\n                    if (this.state[row][col] !== 0) {\n                        i--;\n                        continue;\n                    }\n                    this.state[row][col] = value;\n                }\n            }\n        },\n        {\n            // add up all possible siblings with the same values\n            key: \"addUp\",\n            value: function addUp(state) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        for(var i = 1; i < row.length; i++)if (row[i - 1] === row[i]) {\n                            row[i - 1] = row[i - 1] + row[i];\n                            this.score += row[i - 1];\n                            row[i] = 0;\n                            if (row[i - 1] >= 2048) this.setStatus(\"win\");\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return state;\n            }\n        },\n        {\n            // in case a user provided initial state of the game\n            // validate custom initial state\n            key: \"validateInitialState\",\n            value: function validateInitialState() {\n                var sum = 0;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    // if the user added incorrect value then the game starts with default;\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                        try {\n                            for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                var cell = _step1.value;\n                                if (cell % 2 !== 0 || cell > 2048 || cell < 0) {\n                                    this.state = this.copyState((0, $2f97c2a4ea6269f4$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_defaultState));\n                                    return false;\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                        }\n                        sum += row.reduce(function(acc, curr) {\n                            return acc + curr;\n                        });\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                // if sum > 0 then all validation is passed successfully\n                // hence the initial state is custom\n                // else it will be default (see this.start() if/else statement)\n                return sum !== 0;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$startBtn = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$cells = document.querySelectorAll(\".field-cell\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\n// keypress logic\nfunction $197cd56b15c33885$var$keyPress(e) {\n    // user shouldn't be able to continue playing the already won game\n    if ($197cd56b15c33885$var$messageWin.classList.contains(\"hidden\")) {\n        if ($197cd56b15c33885$var$startBtn.classList.contains(\"restart\")) {\n            if (e.key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n            if (e.key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n            if (e.key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n            if (e.key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n            // tracks if there are any changes in any direction\n            // (if not then no need to add new value)\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\" || e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") $197cd56b15c33885$var$updateStyles();\n        }\n    }\n}\n// Updates values and styles of the game\nfunction $197cd56b15c33885$var$updateStyles() {\n    var _gameState;\n    var gameState = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = $197cd56b15c33885$var$game.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            (_gameState = gameState).push.apply(_gameState, (0, $227c6742e0ff6f82$export$71511d61b312f219)(row));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    for(var i = 0; i < $197cd56b15c33885$var$cells.length; i++){\n        // remove last added style if any\n        if ($197cd56b15c33885$var$cells[i].classList.length > 1) $197cd56b15c33885$var$cells[i].classList.remove($197cd56b15c33885$var$cells[i].classList[$197cd56b15c33885$var$cells[i].classList.length - 1]);\n        // update value and a style\n        if (gameState[i] !== 0) {\n            $197cd56b15c33885$var$cells[i].textContent = gameState[i];\n            $197cd56b15c33885$var$cells[i].classList.add(\"field-cell--\".concat(gameState[i]));\n        } else $197cd56b15c33885$var$cells[i].textContent = \"\";\n    }\n    // updates score\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.score;\n    // update message in case of win/lose\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n    // player can't continue playing the same game after loosing\n    if ($197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n}\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports([\n    [\n        123,\n        128,\n        0,\n        8\n    ],\n    [\n        16,\n        8,\n        16,\n        32\n    ],\n    [\n        8,\n        16,\n        32,\n        64\n    ],\n    [\n        16,\n        32,\n        0,\n        128\n    ]\n]);\n$197cd56b15c33885$var$startBtn.addEventListener(\"click\", function() {\n    // Change start btn styles and text to restart after pressing the btn\n    if ($197cd56b15c33885$var$startBtn.classList.contains(\"start\")) $197cd56b15c33885$var$game.start();\n    if ($197cd56b15c33885$var$startBtn.classList.contains(\"restart\")) {\n        if (!$197cd56b15c33885$var$messageLose.classList.contains(\"hidden\")) $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        if (!$197cd56b15c33885$var$messageWin.classList.contains(\"hidden\")) $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$game.start();\n    }\n    $197cd56b15c33885$var$startBtn.classList.remove(\"start\");\n    $197cd56b15c33885$var$startBtn.textContent = \"Restart\";\n    $197cd56b15c33885$var$startBtn.classList.add(\"restart\");\n    // Remove initial message (press start)\n    $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    // Add values and styles to initial state of the game\n    $197cd56b15c33885$var$updateStyles();\n});\ndocument.addEventListener(\"keydown\", $197cd56b15c33885$var$keyPress);\n\n})();\n//# sourceMappingURL=index.79f8f910.js.map\n","'use strict';\n\n// import { Game } from '../modules/Game.class.js';\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\n\nconst startBtn = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst cells = document.querySelectorAll('.field-cell');\nconst score = document.querySelector('.game-score');\n\n// keypress logic\nfunction keyPress(e) {\n  // user shouldn't be able to continue playing the already won game\n  if (messageWin.classList.contains('hidden')) {\n    if (startBtn.classList.contains('restart')) {\n      if (e.key === 'ArrowLeft') {\n        game.moveLeft();\n      }\n\n      if (e.key === 'ArrowRight') {\n        game.moveRight();\n      }\n\n      if (e.key === 'ArrowUp') {\n        game.moveUp();\n      }\n\n      if (e.key === 'ArrowDown') {\n        game.moveDown();\n      }\n\n      // tracks if there are any changes in any direction\n      // (if not then no need to add new value)\n\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        updateStyles();\n      }\n    }\n  }\n}\n\n// Updates values and styles of the game\nfunction updateStyles() {\n  const gameState = [];\n\n  for (const row of game.state) {\n    gameState.push(...row);\n  }\n\n  for (let i = 0; i < cells.length; i++) {\n    // remove last added style if any\n    if (cells[i].classList.length > 1) {\n      cells[i].classList.remove(\n        cells[i].classList[cells[i].classList.length - 1],\n      );\n    }\n\n    // update value and a style\n    if (gameState[i] !== 0) {\n      cells[i].textContent = gameState[i];\n      cells[i].classList.add(`field-cell--${gameState[i]}`);\n    } else {\n      cells[i].textContent = '';\n    }\n  }\n\n  // updates score\n  score.textContent = game.score;\n\n  // update message in case of win/lose\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  // player can't continue playing the same game after loosing\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nconst game = new Game([\n  [123, 128, 0, 8],\n  [16, 8, 16, 32],\n  [8, 16, 32, 64],\n  [16, 32, 0, 128],\n]);\n\nstartBtn.addEventListener('click', () => {\n  // Change start btn styles and text to restart after pressing the btn\n  if (startBtn.classList.contains('start')) {\n    game.start();\n  }\n\n  if (startBtn.classList.contains('restart')) {\n    if (!messageLose.classList.contains('hidden')) {\n      messageLose.classList.add('hidden');\n    }\n\n    if (!messageWin.classList.contains('hidden')) {\n      messageWin.classList.add('hidden');\n    }\n    game.restart();\n    game.start();\n  }\n\n  startBtn.classList.remove('start');\n  startBtn.textContent = 'Restart';\n  startBtn.classList.add('restart');\n\n  // Remove initial message (press start)\n  messageStart.classList.add('hidden');\n\n  // Add values and styles to initial state of the game\n  updateStyles();\n});\n\ndocument.addEventListener('keydown', keyPress);\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  // How many cells created in the beginning of the game\n  #numOfInitialCells = 2;\n  #defaultState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.#defaultState) {\n    this.initialState = initialState;\n    this.state = [];\n    this.score = 0;\n    this.prevState = [];\n    this.isChanged = false;\n    this.status = `idle`;\n\n    for (const rowArr of initialState) {\n      this.state.push([...rowArr]);\n    }\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  setStatus(stat) {\n    this.status = stat;\n  }\n\n  // checks if there are any duplicate values next to each other\n  gameEnd() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 1; col < this.state[0].length; col++) {\n        if (\n          this.state[row][col - 1] === this.state[row][col] ||\n          this.state[col - 1][row] === this.state[col][row] ||\n          this.state[row][col - 1] === 0 ||\n          this.state[row][col] === 0\n        ) {\n          return false;\n        }\n      }\n    }\n    this.setStatus('lose');\n\n    return true;\n  }\n\n  // tracks if there are any changes in any direction\n  // (if not then no need to add new value)\n  // but maybe it is a loss, so check for it as well\n  changes(state) {\n    this.isChanged = false;\n\n    for (let row = 0; row < state.length; row++) {\n      for (let col = 0; col < state[0].length; col++) {\n        if (this.state[row][col] !== state[row][col]) {\n          this.isChanged = true;\n          this.addValue();\n\n          return this.isChanged;\n        }\n      }\n    }\n\n    return this.isChanged;\n  }\n\n  freeSpaceToLeft(state) {\n    for (const row of state) {\n      for (let i = 0; i < row.length; i++) {\n        const indexOfVal = row.findIndex((el, index, array) => {\n          if (array[index - 1] === 0 && el !== 0) {\n            return true;\n          }\n        });\n        const rowUpToValue = row.slice(0, indexOfVal);\n        const firstEmpty = rowUpToValue.indexOf(0);\n\n        if (firstEmpty !== -1 && indexOfVal !== -1) {\n          row[firstEmpty] = row[indexOfVal];\n          row[indexOfVal] = 0;\n        }\n      }\n    }\n\n    return state;\n  }\n\n  updateState(arr = this.state) {\n    let state = this.copyState(arr);\n\n    // clears free space up to the left\n    state = this.freeSpaceToLeft(state);\n    // adds same values that are close neighbours in a row\n    state = this.addUp(state);\n    // clears free space up to the left after adding and updates the state\n    state = this.freeSpaceToLeft(state);\n\n    return state;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n    this.prevState = this.copyState(this.state);\n    // this.addValue();\n    this.state = this.updateState();\n    this.changes(this.prevState);\n    this.gameEnd();\n  }\n\n  moveRight(arr = this.state) {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    // check if moveRight was called by moveDown\n    let isCb = true;\n\n    if (arr === this.state) {\n      isCb = false;\n      this.prevState = this.copyState(this.state);\n    }\n\n    let state = [];\n\n    for (const row of arr) {\n      state.push([...row].toReversed());\n    }\n\n    state = this.updateState(state);\n\n    this.state = [];\n\n    for (const row of state) {\n      this.state.push([...row].toReversed());\n    }\n\n    if (!isCb) {\n      this.changes(this.prevState);\n      this.gameEnd();\n    }\n\n    return this.state;\n  }\n\n  // creates a state where columns become rows and vice versa\n  transposeMatrix(initial = this.state) {\n    const transposed = this.copyState(initial);\n\n    for (let row = 0; row < initial.length; row++) {\n      for (let col = 0; col < initial[0].length; col++) {\n        transposed[col][row] = initial[row][col];\n      }\n    }\n\n    return transposed;\n  }\n\n  moveUp() {\n    this.upOrDown(this.updateState);\n  }\n\n  moveDown() {\n    this.upOrDown(this.moveRight);\n  }\n\n  // helper function to avoid duplication\n  upOrDown(callback) {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    this.prevState = this.copyState(this.state);\n\n    let state = this.transposeMatrix();\n\n    // Call the callback function with the `state`\n    state = callback.call(this, state);\n\n    this.state = this.transposeMatrix(state);\n    this.changes(this.prevState);\n    this.gameEnd();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    // change status of the game to playing;\n    this.setStatus('playing');\n    // no need to add values at the start if the values are correct\n    // (add 'return' if this.validateInitialState() is true)\n\n    this.validateInitialState();\n\n    // Choose randomly what two columns and rows get initial values of 2/4;\n    for (let j = 0; j < this.#numOfInitialCells; j++) {\n      this.addValue();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.copyState();\n    this.setStatus('idle');\n    this.score = 0;\n\n    // this.start();\n  }\n\n  // Creates 2-level deep copy for an array\n  copyState(initState = this.initialState) {\n    const resetArr = [];\n\n    for (const rowArr of initState) {\n      resetArr.push([...rowArr]);\n    }\n\n    return resetArr;\n  }\n\n  // add new value to the game randomly\n  addValue() {\n    // in case of an infinite loop\n    let attempt = 0;\n\n    for (let i = 0; i < 1; i++) {\n      const col = Math.floor(Math.random() * this.state.length);\n      const row = Math.floor(Math.random() * this.state[0].length);\n      const value = Math.random() < 0.9 ? 2 : 4;\n\n      // in case of an infinite loop\n      if (attempt++ > 1000) {\n        break;\n      }\n\n      if (this.state[row][col] !== 0) {\n        i--;\n        continue;\n      }\n\n      this.state[row][col] = value;\n    }\n  }\n\n  // add up all possible siblings with the same values\n  addUp(state) {\n    for (const row of state) {\n      for (let i = 1; i < row.length; i++) {\n        if (row[i - 1] === row[i]) {\n          row[i - 1] = row[i - 1] + row[i];\n          this.score += row[i - 1];\n          row[i] = 0;\n\n          if (row[i - 1] >= 2048) {\n            this.setStatus('win');\n          }\n        }\n      }\n    }\n\n    return state;\n  }\n\n  // in case a user provided initial state of the game\n  // validate custom initial state\n  validateInitialState() {\n    let sum = 0;\n    // if the user added incorrect value then the game starts with default;\n\n    for (const row of this.state) {\n      for (const cell of row) {\n        if (cell % 2 !== 0 || cell > 2048 || cell < 0) {\n          this.state = this.copyState(this.#defaultState);\n\n          return false;\n        }\n      }\n\n      sum += row.reduce((acc, curr) => acc + curr);\n    }\n\n    // if sum > 0 then all validation is passed successfully\n    // hence the initial state is custom\n    // else it will be default (see this.start() if/else statement)\n    return sum !== 0;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","import { _ as _class_apply_descriptor_get } from \"./_class_apply_descriptor_get.js\";\nimport { _ as _class_extract_field_descriptor } from \"./_class_extract_field_descriptor.js\";\n\nfunction _class_private_field_get(receiver, privateMap) {\n    var descriptor = _class_extract_field_descriptor(receiver, privateMap, \"get\");\n    return _class_apply_descriptor_get(receiver, descriptor);\n}\nexport { _class_private_field_get as _ };\n","function _class_apply_descriptor_get(receiver, descriptor) {\n    if (descriptor.get) return descriptor.get.call(receiver);\n\n    return descriptor.value;\n}\nexport { _class_apply_descriptor_get as _ };\n","function _class_extract_field_descriptor(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n\n    return privateMap.get(receiver);\n}\nexport { _class_extract_field_descriptor as _ };\n","import { _ as _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nfunction _class_private_field_init(obj, privateMap, value) {\n    _check_private_redeclaration(obj, privateMap);\n    privateMap.set(obj, value);\n}\nexport { _class_private_field_init as _ };\n","function _check_private_redeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\nexport { _check_private_redeclaration as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$3d28d7f1aac198f5$exports","$2f97c2a4ea6269f4$export$71511d61b312f219","receiver","privateMap","descriptor","action","has","get","value","$5d6c3530fa14a187$export$71511d61b312f219","obj","privateCollection","set","$3d28d7f1aac198f5$var$_numOfInitialCells","WeakMap","$3d28d7f1aac198f5$var$_defaultState","protoProps","Game","initialState","arguments","instance","Constructor","writable","state","score","prevState","isChanged","status","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","rowArr","push","err","return","key","stat","row","col","setStatus","addValue","indexOfVal","findIndex","el","index","array","firstEmpty","rowUpToValue","indexOf","copyState","freeSpaceToLeft","addUp","getStatus","updateState","changes","gameEnd","isCb","toReversed","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row1","initial","transposed","upOrDown","moveRight","callback","transposeMatrix","validateInitialState","j","initState","resetArr","attempt","Math","floor","random","sum","cell","reduce","acc","curr","$4fc75ccb937ab1df$var$_defineProperties","target","props","enumerable","configurable","defineProperty","$197cd56b15c33885$var$startBtn","document","querySelector","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$cells","querySelectorAll","$197cd56b15c33885$var$score","$197cd56b15c33885$var$updateStyles","gameState","$197cd56b15c33885$var$game","apply","classList","remove","textContent","add","concat","addEventListener","contains","start","restart","e","moveLeft","moveUp","moveDown"],"version":3,"file":"index.79f8f910.js.map"}