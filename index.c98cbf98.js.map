{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    // How many cells created in the beginning of the game\n    #numOfInitialCells = 2;\n    #defaultState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = this.#defaultState){\n        this.initialState = initialState;\n        this.state = [];\n        this.score = 0;\n        this.prevState = [];\n        this.isChanged = false;\n        this.status = `idle`;\n        for (const rowArr of initialState)this.state.push([\n            ...rowArr\n        ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    setStatus(stat) {\n        this.status = stat;\n    }\n    // checks if there are any duplicate values next to each other\n    gameEnd() {\n        for(let row = 0; row < this.state.length; row++)for(let col = 1; col < this.state[0].length; col++){\n            if (this.state[row][col - 1] === this.state[row][col] || this.state[col - 1][row] === this.state[col][row] || this.state[row][col - 1] === 0 || this.state[row][col] === 0) return false;\n        }\n        this.setStatus(\"lose\");\n        return true;\n    }\n    // tracks if there are any changes in any direction\n    // (if not then no need to add new value)\n    // but maybe it is a loss, so check for it as well\n    changes(state) {\n        this.isChanged = false;\n        for(let row = 0; row < state.length; row++){\n            for(let col = 0; col < state[0].length; col++)if (this.state[row][col] !== state[row][col]) {\n                this.isChanged = true;\n                this.addValue();\n                return this.isChanged;\n            }\n        }\n        return this.isChanged;\n    }\n    freeSpaceToLeft(state) {\n        for (const row of state)for(let i = 0; i < row.length; i++){\n            const indexOfVal = row.findIndex((el, index, array)=>{\n                if (array[index - 1] === 0 && el !== 0) return true;\n            });\n            const rowUpToValue = row.slice(0, indexOfVal);\n            const firstEmpty = rowUpToValue.indexOf(0);\n            if (firstEmpty !== -1 && indexOfVal !== -1) {\n                row[firstEmpty] = row[indexOfVal];\n                row[indexOfVal] = 0;\n            }\n        }\n        return state;\n    }\n    updateState(arr = this.state) {\n        let state = this.copyState(arr);\n        // clears free space up to the left\n        state = this.freeSpaceToLeft(state);\n        // adds same values that are close neighbours in a row\n        state = this.addUp(state);\n        // clears free space up to the left after adding and updates the state\n        state = this.freeSpaceToLeft(state);\n        return state;\n    }\n    moveLeft() {\n        if (this.getStatus() !== \"playing\") return;\n        this.prevState = this.copyState(this.state);\n        // this.addValue();\n        this.state = this.updateState();\n        this.changes(this.prevState);\n        this.gameEnd();\n    }\n    moveRight(arr = this.state) {\n        if (this.getStatus() !== \"playing\") return;\n        // check if moveRight was called by moveDown\n        let isCb = true;\n        if (arr === this.state) {\n            isCb = false;\n            this.prevState = this.copyState(this.state);\n        }\n        let state = [];\n        for (const row of arr)state.push([\n            ...row\n        ].toReversed());\n        state = this.updateState(state);\n        this.state = [];\n        for (const row of state)this.state.push([\n            ...row\n        ].toReversed());\n        if (!isCb) {\n            this.changes(this.prevState);\n            this.gameEnd();\n        }\n        return this.state;\n    }\n    // creates a state where columns become rows and vice versa\n    transposeMatrix(initial = this.state) {\n        const transposed = this.copyState(initial);\n        for(let row = 0; row < initial.length; row++)for(let col = 0; col < initial[0].length; col++)transposed[col][row] = initial[row][col];\n        return transposed;\n    }\n    moveUp() {\n        this.upOrDown(this.updateState);\n    }\n    moveDown() {\n        this.upOrDown(this.moveRight);\n    }\n    // helper function to avoid duplication\n    upOrDown(callback) {\n        if (this.getStatus() !== \"playing\") return;\n        this.prevState = this.copyState(this.state);\n        let state = this.transposeMatrix();\n        // Call the callback function with the `state`\n        state = callback.call(this, state);\n        this.state = this.transposeMatrix(state);\n        this.changes(this.prevState);\n        this.gameEnd();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        // change status of the game to playing;\n        this.setStatus(\"playing\");\n        // no need to add values at the start if the values are correct\n        // (add 'return' if this.validateInitialState() is true)\n        this.validateInitialState();\n        // Choose randomly what two columns and rows get initial values of 2/4;\n        for(let j = 0; j < this.#numOfInitialCells; j++)this.addValue();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.copyState();\n        this.setStatus(\"idle\");\n        this.score = 0;\n    // this.start();\n    }\n    // Creates 2-level deep copy for an array\n    copyState(initState = this.initialState) {\n        const resetArr = [];\n        for (const rowArr of initState)resetArr.push([\n            ...rowArr\n        ]);\n        return resetArr;\n    }\n    // add new value to the game randomly\n    addValue() {\n        // in case of an infinite loop\n        let attempt = 0;\n        for(let i = 0; i < 1; i++){\n            const col = Math.floor(Math.random() * this.state.length);\n            const row = Math.floor(Math.random() * this.state[0].length);\n            const value = Math.random() < 0.9 ? 2 : 4;\n            // in case of an infinite loop\n            if (attempt++ > 1000) break;\n            if (this.state[row][col] !== 0) {\n                i--;\n                continue;\n            }\n            this.state[row][col] = value;\n        }\n    }\n    // add up all possible siblings with the same values\n    addUp(state) {\n        for (const row of state){\n            for(let i = 1; i < row.length; i++)if (row[i - 1] === row[i]) {\n                row[i - 1] = row[i - 1] + row[i];\n                this.score += row[i - 1];\n                row[i] = 0;\n                if (row[i - 1] >= 2048) this.setStatus(\"win\");\n            }\n        }\n        return state;\n    }\n    // in case a user provided initial state of the game\n    // validate custom initial state\n    validateInitialState() {\n        let sum = 0;\n        // if the user added incorrect value then the game starts with default;\n        for (const row of this.state){\n            for (const cell of row)if (cell % 2 !== 0 || cell > 2048 || cell < 0) {\n                this.state = this.copyState(this.#defaultState);\n                return false;\n            }\n            sum += row.reduce((acc, curr)=>acc + curr);\n        }\n        // if sum > 0 then all validation is passed successfully\n        // hence the initial state is custom\n        // else it will be default (see this.start() if/else statement)\n        return sum !== 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\n// keypress logic\nfunction $09e991522ca7e64e$var$keyPress(e) {\n    // user shouldn't be able to continue playing the already won game\n    if ($09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) {\n        if ($09e991522ca7e64e$var$startBtn.classList.contains(\"restart\")) {\n            if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n            if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n            if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n            if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n            // tracks if there are any changes in any direction\n            // (if not then no need to add new value)\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\" || e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") $09e991522ca7e64e$var$updateStyles();\n        }\n    }\n}\n// Updates values and styles of the game\nfunction $09e991522ca7e64e$var$updateStyles() {\n    const gameState = [];\n    for (const row of $09e991522ca7e64e$var$game.state)gameState.push(...row);\n    for(let i = 0; i < $09e991522ca7e64e$var$cells.length; i++){\n        // remove last added style if any\n        if ($09e991522ca7e64e$var$cells[i].classList.length > 1) $09e991522ca7e64e$var$cells[i].classList.remove($09e991522ca7e64e$var$cells[i].classList[$09e991522ca7e64e$var$cells[i].classList.length - 1]);\n        // update value and a style\n        if (gameState[i] !== 0) {\n            $09e991522ca7e64e$var$cells[i].textContent = gameState[i];\n            $09e991522ca7e64e$var$cells[i].classList.add(`field-cell--${gameState[i]}`);\n        } else $09e991522ca7e64e$var$cells[i].textContent = \"\";\n    }\n    // updates score\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n    // update message in case of win/lose\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    // player can't continue playing the same game after loosing\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports([\n    [\n        123,\n        128,\n        0,\n        8\n    ],\n    [\n        16,\n        8,\n        16,\n        32\n    ],\n    [\n        8,\n        16,\n        32,\n        64\n    ],\n    [\n        16,\n        32,\n        0,\n        128\n    ]\n]);\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    // Change start btn styles and text to restart after pressing the btn\n    if ($09e991522ca7e64e$var$startBtn.classList.contains(\"start\")) $09e991522ca7e64e$var$game.start();\n    if ($09e991522ca7e64e$var$startBtn.classList.contains(\"restart\")) {\n        if (!$09e991522ca7e64e$var$messageLose.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        if (!$09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.start();\n    }\n    $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n    // Remove initial message (press start)\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    // Add values and styles to initial state of the game\n    $09e991522ca7e64e$var$updateStyles();\n});\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$keyPress);\n\n\n//# sourceMappingURL=index.c98cbf98.js.map\n","'use strict';\n\n// import { Game } from '../modules/Game.class.js';\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\n\nconst startBtn = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst cells = document.querySelectorAll('.field-cell');\nconst score = document.querySelector('.game-score');\n\n// keypress logic\nfunction keyPress(e) {\n  // user shouldn't be able to continue playing the already won game\n  if (messageWin.classList.contains('hidden')) {\n    if (startBtn.classList.contains('restart')) {\n      if (e.key === 'ArrowLeft') {\n        game.moveLeft();\n      }\n\n      if (e.key === 'ArrowRight') {\n        game.moveRight();\n      }\n\n      if (e.key === 'ArrowUp') {\n        game.moveUp();\n      }\n\n      if (e.key === 'ArrowDown') {\n        game.moveDown();\n      }\n\n      // tracks if there are any changes in any direction\n      // (if not then no need to add new value)\n\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        updateStyles();\n      }\n    }\n  }\n}\n\n// Updates values and styles of the game\nfunction updateStyles() {\n  const gameState = [];\n\n  for (const row of game.state) {\n    gameState.push(...row);\n  }\n\n  for (let i = 0; i < cells.length; i++) {\n    // remove last added style if any\n    if (cells[i].classList.length > 1) {\n      cells[i].classList.remove(\n        cells[i].classList[cells[i].classList.length - 1],\n      );\n    }\n\n    // update value and a style\n    if (gameState[i] !== 0) {\n      cells[i].textContent = gameState[i];\n      cells[i].classList.add(`field-cell--${gameState[i]}`);\n    } else {\n      cells[i].textContent = '';\n    }\n  }\n\n  // updates score\n  score.textContent = game.score;\n\n  // update message in case of win/lose\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  // player can't continue playing the same game after loosing\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nconst game = new Game([\n  [123, 128, 0, 8],\n  [16, 8, 16, 32],\n  [8, 16, 32, 64],\n  [16, 32, 0, 128],\n]);\n\nstartBtn.addEventListener('click', () => {\n  // Change start btn styles and text to restart after pressing the btn\n  if (startBtn.classList.contains('start')) {\n    game.start();\n  }\n\n  if (startBtn.classList.contains('restart')) {\n    if (!messageLose.classList.contains('hidden')) {\n      messageLose.classList.add('hidden');\n    }\n\n    if (!messageWin.classList.contains('hidden')) {\n      messageWin.classList.add('hidden');\n    }\n    game.restart();\n    game.start();\n  }\n\n  startBtn.classList.remove('start');\n  startBtn.textContent = 'Restart';\n  startBtn.classList.add('restart');\n\n  // Remove initial message (press start)\n  messageStart.classList.add('hidden');\n\n  // Add values and styles to initial state of the game\n  updateStyles();\n});\n\ndocument.addEventListener('keydown', keyPress);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  // How many cells created in the beginning of the game\n  #numOfInitialCells = 2;\n  #defaultState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.#defaultState) {\n    this.initialState = initialState;\n    this.state = [];\n    this.score = 0;\n    this.prevState = [];\n    this.isChanged = false;\n    this.status = `idle`;\n\n    for (const rowArr of initialState) {\n      this.state.push([...rowArr]);\n    }\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  setStatus(stat) {\n    this.status = stat;\n  }\n\n  // checks if there are any duplicate values next to each other\n  gameEnd() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 1; col < this.state[0].length; col++) {\n        if (\n          this.state[row][col - 1] === this.state[row][col] ||\n          this.state[col - 1][row] === this.state[col][row] ||\n          this.state[row][col - 1] === 0 ||\n          this.state[row][col] === 0\n        ) {\n          return false;\n        }\n      }\n    }\n    this.setStatus('lose');\n\n    return true;\n  }\n\n  // tracks if there are any changes in any direction\n  // (if not then no need to add new value)\n  // but maybe it is a loss, so check for it as well\n  changes(state) {\n    this.isChanged = false;\n\n    for (let row = 0; row < state.length; row++) {\n      for (let col = 0; col < state[0].length; col++) {\n        if (this.state[row][col] !== state[row][col]) {\n          this.isChanged = true;\n          this.addValue();\n\n          return this.isChanged;\n        }\n      }\n    }\n\n    return this.isChanged;\n  }\n\n  freeSpaceToLeft(state) {\n    for (const row of state) {\n      for (let i = 0; i < row.length; i++) {\n        const indexOfVal = row.findIndex((el, index, array) => {\n          if (array[index - 1] === 0 && el !== 0) {\n            return true;\n          }\n        });\n        const rowUpToValue = row.slice(0, indexOfVal);\n        const firstEmpty = rowUpToValue.indexOf(0);\n\n        if (firstEmpty !== -1 && indexOfVal !== -1) {\n          row[firstEmpty] = row[indexOfVal];\n          row[indexOfVal] = 0;\n        }\n      }\n    }\n\n    return state;\n  }\n\n  updateState(arr = this.state) {\n    let state = this.copyState(arr);\n\n    // clears free space up to the left\n    state = this.freeSpaceToLeft(state);\n    // adds same values that are close neighbours in a row\n    state = this.addUp(state);\n    // clears free space up to the left after adding and updates the state\n    state = this.freeSpaceToLeft(state);\n\n    return state;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n    this.prevState = this.copyState(this.state);\n    // this.addValue();\n    this.state = this.updateState();\n    this.changes(this.prevState);\n    this.gameEnd();\n  }\n\n  moveRight(arr = this.state) {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    // check if moveRight was called by moveDown\n    let isCb = true;\n\n    if (arr === this.state) {\n      isCb = false;\n      this.prevState = this.copyState(this.state);\n    }\n\n    let state = [];\n\n    for (const row of arr) {\n      state.push([...row].toReversed());\n    }\n\n    state = this.updateState(state);\n\n    this.state = [];\n\n    for (const row of state) {\n      this.state.push([...row].toReversed());\n    }\n\n    if (!isCb) {\n      this.changes(this.prevState);\n      this.gameEnd();\n    }\n\n    return this.state;\n  }\n\n  // creates a state where columns become rows and vice versa\n  transposeMatrix(initial = this.state) {\n    const transposed = this.copyState(initial);\n\n    for (let row = 0; row < initial.length; row++) {\n      for (let col = 0; col < initial[0].length; col++) {\n        transposed[col][row] = initial[row][col];\n      }\n    }\n\n    return transposed;\n  }\n\n  moveUp() {\n    this.upOrDown(this.updateState);\n  }\n\n  moveDown() {\n    this.upOrDown(this.moveRight);\n  }\n\n  // helper function to avoid duplication\n  upOrDown(callback) {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    this.prevState = this.copyState(this.state);\n\n    let state = this.transposeMatrix();\n\n    // Call the callback function with the `state`\n    state = callback.call(this, state);\n\n    this.state = this.transposeMatrix(state);\n    this.changes(this.prevState);\n    this.gameEnd();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    // change status of the game to playing;\n    this.setStatus('playing');\n    // no need to add values at the start if the values are correct\n    // (add 'return' if this.validateInitialState() is true)\n\n    this.validateInitialState();\n\n    // Choose randomly what two columns and rows get initial values of 2/4;\n    for (let j = 0; j < this.#numOfInitialCells; j++) {\n      this.addValue();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.copyState();\n    this.setStatus('idle');\n    this.score = 0;\n\n    // this.start();\n  }\n\n  // Creates 2-level deep copy for an array\n  copyState(initState = this.initialState) {\n    const resetArr = [];\n\n    for (const rowArr of initState) {\n      resetArr.push([...rowArr]);\n    }\n\n    return resetArr;\n  }\n\n  // add new value to the game randomly\n  addValue() {\n    // in case of an infinite loop\n    let attempt = 0;\n\n    for (let i = 0; i < 1; i++) {\n      const col = Math.floor(Math.random() * this.state.length);\n      const row = Math.floor(Math.random() * this.state[0].length);\n      const value = Math.random() < 0.9 ? 2 : 4;\n\n      // in case of an infinite loop\n      if (attempt++ > 1000) {\n        break;\n      }\n\n      if (this.state[row][col] !== 0) {\n        i--;\n        continue;\n      }\n\n      this.state[row][col] = value;\n    }\n  }\n\n  // add up all possible siblings with the same values\n  addUp(state) {\n    for (const row of state) {\n      for (let i = 1; i < row.length; i++) {\n        if (row[i - 1] === row[i]) {\n          row[i - 1] = row[i - 1] + row[i];\n          this.score += row[i - 1];\n          row[i] = 0;\n\n          if (row[i - 1] >= 2048) {\n            this.setStatus('win');\n          }\n        }\n      }\n    }\n\n    return state;\n  }\n\n  // in case a user provided initial state of the game\n  // validate custom initial state\n  validateInitialState() {\n    let sum = 0;\n    // if the user added incorrect value then the game starts with default;\n\n    for (const row of this.state) {\n      for (const cell of row) {\n        if (cell % 2 !== 0 || cell > 2048 || cell < 0) {\n          this.state = this.copyState(this.#defaultState);\n\n          return false;\n        }\n      }\n\n      sum += row.reduce((acc, curr) => acc + curr);\n    }\n\n    // if sum > 0 then all validation is passed successfully\n    // hence the initial state is custom\n    // else it will be default (see this.start() if/else statement)\n    return sum !== 0;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","rowArr","state","score","prevState","isChanged","status","push","getStatus","setStatus","stat","gameEnd","row","length","col","changes","addValue","freeSpaceToLeft","i","indexOfVal","findIndex","el","index","array","firstEmpty","rowUpToValue","slice","indexOf","updateState","arr","copyState","addUp","moveLeft","moveRight","isCb","toReversed","transposeMatrix","initial","transposed","moveUp","upOrDown","moveDown","callback","call","getScore","getState","start","validateInitialState","j","restart","initState","resetArr","attempt","Math","floor","random","value","sum","cell","reduce","acc","curr","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$updateStyles","gameState","$09e991522ca7e64e$var$game","classList","remove","textContent","add","addEventListener","contains","e","key"],"version":3,"file":"index.c98cbf98.js.map"}